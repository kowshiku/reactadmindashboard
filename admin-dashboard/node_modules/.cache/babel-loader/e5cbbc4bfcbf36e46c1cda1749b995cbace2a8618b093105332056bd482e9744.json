{"ast":null,"code":"// services/mockApi.js\n\nlet users = [{\n  id: 1,\n  name: \"John Doe\",\n  role: \"Admin\",\n  status: \"Active\"\n}, {\n  id: 2,\n  name: \"Jane Smith\",\n  role: \"Editor\",\n  status: \"Inactive\"\n}];\nconst mockRoles = [{\n  id: 1,\n  name: \"Admin\",\n  permissions: {\n    read: true,\n    write: true,\n    update: true\n  }\n}, {\n  id: 2,\n  name: \"Editor\",\n  permissions: {\n    read: true,\n    write: true,\n    update: false\n  }\n}];\nexport const updateRolePermissions = (id, permissions) => Promise.resolve({\n  success: true,\n  role: {\n    id,\n    permissions\n  }\n});\nexport const mockGetUsers = () => Promise.resolve(users);\nexport const mockAddUser = user => {\n  user.id = users.length + 1;\n  users.push(user);\n  return Promise.resolve(user);\n};\nexport const mockEditUser = updatedUser => {\n  users = users.map(user => user.id === updatedUser.id ? updatedUser : user);\n  return Promise.resolve(updatedUser);\n};\nexport const mockDeleteUser = id => {\n  users = users.filter(user => user.id !== id);\n  return Promise.resolve();\n};","map":{"version":3,"names":["users","id","name","role","status","mockRoles","permissions","read","write","update","updateRolePermissions","Promise","resolve","success","mockGetUsers","mockAddUser","user","length","push","mockEditUser","updatedUser","map","mockDeleteUser","filter"],"sources":["C:/Users/user/Desktop/admin-dashboard/src/services/mockApi.js"],"sourcesContent":["// services/mockApi.js\r\n\r\nlet users = [\r\n    { id: 1, name: \"John Doe\", role: \"Admin\", status: \"Active\" },\r\n    { id: 2, name: \"Jane Smith\", role: \"Editor\", status: \"Inactive\" },\r\n  ];\r\n\r\n  const mockRoles = [\r\n    { id: 1, name: \"Admin\", permissions: { read: true, write: true, update: true } },\r\n    { id: 2, name: \"Editor\", permissions: { read: true, write: true, update: false } },\r\n];\r\n\r\nexport const updateRolePermissions = (id, permissions) =>\r\n    Promise.resolve({ success: true, role: { id, permissions } });\r\n\r\n  \r\n  export const mockGetUsers = () => Promise.resolve(users);\r\n  \r\n  export const mockAddUser = (user) => {\r\n    user.id = users.length + 1;\r\n    users.push(user);\r\n    return Promise.resolve(user);\r\n  };\r\n  \r\n  export const mockEditUser = (updatedUser) => {\r\n    users = users.map((user) => (user.id === updatedUser.id ? updatedUser : user));\r\n    return Promise.resolve(updatedUser);\r\n  };\r\n  \r\n  export const mockDeleteUser = (id) => {\r\n    users = users.filter((user) => user.id !== id);\r\n    return Promise.resolve();\r\n  };\r\n  \r\n  "],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAG,CACR;EAAEC,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,UAAU;EAAEC,IAAI,EAAE,OAAO;EAAEC,MAAM,EAAE;AAAS,CAAC,EAC5D;EAAEH,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,YAAY;EAAEC,IAAI,EAAE,QAAQ;EAAEC,MAAM,EAAE;AAAW,CAAC,CAClE;AAED,MAAMC,SAAS,GAAG,CAChB;EAAEJ,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,OAAO;EAAEI,WAAW,EAAE;IAAEC,IAAI,EAAE,IAAI;IAAEC,KAAK,EAAE,IAAI;IAAEC,MAAM,EAAE;EAAK;AAAE,CAAC,EAChF;EAAER,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,QAAQ;EAAEI,WAAW,EAAE;IAAEC,IAAI,EAAE,IAAI;IAAEC,KAAK,EAAE,IAAI;IAAEC,MAAM,EAAE;EAAM;AAAE,CAAC,CACrF;AAED,OAAO,MAAMC,qBAAqB,GAAGA,CAACT,EAAE,EAAEK,WAAW,KACjDK,OAAO,CAACC,OAAO,CAAC;EAAEC,OAAO,EAAE,IAAI;EAAEV,IAAI,EAAE;IAAEF,EAAE;IAAEK;EAAY;AAAE,CAAC,CAAC;AAG/D,OAAO,MAAMQ,YAAY,GAAGA,CAAA,KAAMH,OAAO,CAACC,OAAO,CAACZ,KAAK,CAAC;AAExD,OAAO,MAAMe,WAAW,GAAIC,IAAI,IAAK;EACnCA,IAAI,CAACf,EAAE,GAAGD,KAAK,CAACiB,MAAM,GAAG,CAAC;EAC1BjB,KAAK,CAACkB,IAAI,CAACF,IAAI,CAAC;EAChB,OAAOL,OAAO,CAACC,OAAO,CAACI,IAAI,CAAC;AAC9B,CAAC;AAED,OAAO,MAAMG,YAAY,GAAIC,WAAW,IAAK;EAC3CpB,KAAK,GAAGA,KAAK,CAACqB,GAAG,CAAEL,IAAI,IAAMA,IAAI,CAACf,EAAE,KAAKmB,WAAW,CAACnB,EAAE,GAAGmB,WAAW,GAAGJ,IAAK,CAAC;EAC9E,OAAOL,OAAO,CAACC,OAAO,CAACQ,WAAW,CAAC;AACrC,CAAC;AAED,OAAO,MAAME,cAAc,GAAIrB,EAAE,IAAK;EACpCD,KAAK,GAAGA,KAAK,CAACuB,MAAM,CAAEP,IAAI,IAAKA,IAAI,CAACf,EAAE,KAAKA,EAAE,CAAC;EAC9C,OAAOU,OAAO,CAACC,OAAO,CAAC,CAAC;AAC1B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}